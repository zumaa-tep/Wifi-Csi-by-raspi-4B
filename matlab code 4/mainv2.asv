function main()
%% phase 1 train model
trainedNet = RNN_LSTM_training();
%% phase 2
numFeatures = 18; % ปรับตาม featrue extracion

muSit = zeros(1,1);
muStand = zeros(1,1);
muSitDown = zeros(1,1);
muStandUp = zeros(1,1);
muWalk = zeros(1,1);
muFall = zeros(1,1);

sigmaSit = zeros(1,1);
sigmaStand = zeros(1,1);
sigmaSitDown = zeros(1,1);
sigmaStandUp = zeros(1,1);
sigmaWalk = zeros(1,1);
sigmaFall = zeros(1,1);

sitMatrix = zeros(1,numFeatures);
standMatrix = zeros(1,numFeatures);
sitdownMatrix = zeros(1,numFeatures);
standupMatrix = zeros(1,numFeatures);
lieMatrix = zeros(1,numFeatures);
fallMatrix = zeros(1,numFeatures);
walkMatrix = zeros(1,numFeatures);

n1 = 0; n2 = 0; n3 = 0; n4 = 0; n5 = 0; n6 = 0; n7 = 0;

Input_Data_Folder='C:/ALL 2 1,2/train2 1,2'; % folder path to access input data
s=strcat(Input_Data_Folder);
data = dir(s);
data = data(~ismember({data.name}, {'.', '..'}));% %Access input data folder and bring .dat files
for i = 1:length(data)
    dataFilename=data(i).name; %extract filename of the each data file
    filepath = fullfile(Input_Data_Folder, dataFilename); % แนะนำแบบนี้
    [filename,name,ext] = fileparts(filepath) ; %extract filename and other information from its path for each data file
    name = regexprep(name,'[\d"]','');
    [tS, csiAmp] = fileReaderv1(filepath);
    [pc, ~ ] = PrincipalComponents(csiAmp, tS);
    cleanPC = rmoutliers(pc.').';       
    features = FeatureExtraction(cleanPC);
    i

    %––– STEP 4 : กระจายลงแต่ละ activity –––––––––––––––––––––––––––––––––––
    if name == "walk"
        n1 = n1 + 1;
        walkMatrix(n1,:) = reshape(features, [1, numFeatures]);
    elseif name == "fall"
        n2 = n2 + 1;
        fallMatrix(n2,:) = reshape(features, [1, numFeatures]);
    elseif name == "sit"
        n3 = n3 + 1;
       sitMatrix(n3,:) = reshape(features, [1, numFeatures]);
    elseif name == "sitdown"
        n4 = n4 + 1;
        sitdownMatrix(n4,:) = reshape(features, [1, numFeatures]);
    elseif name == "stand"
        n5 = n5 + 1;
       standMatrix(n5,:) = reshape(features, [1, numFeatures]);
    elseif name == "standup"
       n6 = n6 + 1;
        standupMatrix(n6,:) = reshape(features, [1, numFeatures]);
    elseif name == "lie"
       n7 = n7 + 1;
       lieMatrix(n7,:) = reshape(features, [1, numFeatures]);
    end
end

% เขียนเก็บไว้ตอนใช้ครั้งหน้าจะไม่ต้องรันด้านบน
writematrix(walkMatrix, "walkMatrix.txt");
writematrix(sitMatrix, "sitMatrix.txt");
writematrix(sitdownMatrix, "sitdownMatrix.txt");
writematrix(standupMatrix, "standupMatrix.txt");
writematrix(fallMatrix, "fallMatrix.txt");
writematrix(standMatrix, "standMatrix.txt");

standMatrix = readmatrix("standMatrix.txt");
walkMatrix = readmatrix("walkMatrix.txt");
sitMatrix = readmatrix("sitMatrix.txt");
sitdownMatrix = readmatrix("sitdownMatrix.txt");
standupMatrix = readmatrix("standupMatrix.txt");
fallMatrix = readmatrix("fallMatrix.txt");

%% phase 4 
% เพิ่มการใส่ real time 
% เทสการใช้งานแบบยาวๆ 
% แก้ mu กับ sigma 
% แก้ feature extraction 
% แก้ createLSTMDataSet เอาตัวเก่าที่เคยใช้มา X
% เรียกใช้ logpdf สำหระบการสร้าง pdf

dataFile = 'C:/fall3.pcap';
[tStamp, csiAmp] = fileReaderv1(dataFile);          % Nx256
[pc, time]          = PrincipalComponents(csiAmp,tStamp);   % T×256
size(csiAmp)
size(tStamp)
modelFile = 'C:/RNN_LSTM_Network.mat'
s                = load(modelFile);       % load .mat
mylstmNetwork    = s.RNN_LSTM_Network;                 % ปรับชื่อให้ตรงกับ .mat
numFeatures      = mylstmNetwork.Layers(1).InputSize;  % = 10

logFolder   = fullfile(pwd, 'logs');          % เก็บไว้ในโฟลเดอร์ย่อยชื่อ logs
if ~exist(logFolder, 'dir')                   % ถ้ายังไม่มีให้สร้าง
    mkdir(logFolder);
end

timeStamp   = datestr(now,'yyyymmdd_HHMMSS'); % ใช้เวลาปัจจุบันกำกับชื่อไฟล์
logFileTxt  = fullfile(logFolder, ...
               ['activity_log_' timeStamp '.txt']);

fid = fopen(logFileTxt,'w');
fprintf(fid,'Label\tStartIx\tEndIx\tMaxPDF\n');
fclose(fid);

%% fhase 5       
lastLabel = "";
previousLabel = "";


% for i = 1:size(time,1) %หาตัว ts เริ่ม
%     if(time(1,i) > 1)
%         j = i % หาตัวเริ่ม
%         break
%     end
% end 

j = 1;
for i = 1:size(tStamp,2) 
    maxPDF  = -Inf;
    windowsize = 10;
    i
    if i-j >= windowsize || i == size(tStamp,2) % รับมา 3 วิ  
        start = j;
        window           = csiAmp(j:i,:);    
        [pc, time]       = PrincipalComponents(window,tStamp);
        windowPCAR       = pc(:,:);
        windowPCA        = pc(:,1:numFeatures); % T×10
        windowPCA        = rmoutliers(windowPCA);   % ตัด outlier ถ้าม
        seq              = normalize(windowPCA', 'range');  % 10×T
        pred             = classify(mylstmNetwork, {seq}, 'MiniBatchSize',1);
        predLabels       = string(pred);
        fprintf("Prediction for %s :  %s\n", dataFile, predLabels);

        % ใช้แก้ predlabels โดยใช้ท่าทั้งสองแบบในการช่วยหาท่าระหวา่งทาง
        if previousLabel == "walk" && predLabels == "standup" 
            predLabels = "sitdown"
        elseif previousLabel == "sit" && predLabels == "sitdown"
            predLabels = "standup"
        end
        
        windowpdf = FeatureExtraction(windowPCA);
        disp(size(windowpdf(:,:)));   % X
        disp(size(muFall));               % MU
        disp(size(sigmaFall)); 
        if predLabels == "walk"
            y = mvnpdf(windowpdf(:,:),muWalk, sigmaWalk);
        elseif predLabels == "sit"
            y = mvnpdf(windowpdf(:,:),muSit,sigmaSit);
        elseif predLabels == "stand"
            y = mvnpdf(windowpdf(:,:),muStand,sigmaStand);
        elseif predLabels == "fall" % && lastLabel == predLabel % เพื่อเช็คว่า fall ชัวร์
            y = mvnpdf(windowpdf(:,:),muFall,sigmaFall);
        elseif predLabels == "sitdown" % && lastLabel == predLabel
            y = mvnpdf(windowpdf(:,:),muSitDown,sigmaSitDown);
        elseif predLabels == "standup" % && lastLabel == predLabel 
            y = mvnpdf(windowpdf(:,:),muStandUp,sigmaStandUp);
        else % ไม่มีใครตรงเลย
            j = i+1 ;
            break
        end        
        
     if y == maxPDF % ตรงนี้ยังไม่เสร็จ 
        maxPDF = y % 
        j = j+5 
        if j == size(tStamp,2)
            lastIndex = previousIndex; 
            break
        end
        disp('activity continues')
        continue
     else
        k =j-i;
        fprintf('sasasass')
        fid = fopen(logFileTxt,'a');       % 'w' = เขียนทับไฟล์ใหม่
        % เขียนหัวตาราง (optional)
        label     = predLabels;
        startTime = tStamp(i);
        endTime   = tStamp(j);
        score     = maxPDF;
        
fprintf(fid, '%s\t%d\t%d\t%.6f\t%d\t%d\n', ...
        label, startTime, endTime, score, i, j);

      end
        fclose(fid);                       % ปิดไฟล์เสมอ!
     end
    end
end